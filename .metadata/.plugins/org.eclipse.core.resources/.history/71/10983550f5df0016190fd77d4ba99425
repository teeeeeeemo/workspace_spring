<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
 	
	<!--  클래스패스에 있는 클래스들을 스캔하여 @Component가 설정된 클래스들을 자동으로 객체 생3 -->
	<context:component-scan base-package="com.springbook.biz"></context:component-scan>
	
	<!--  스프링과 Mybatis를 연동 하기 위한 SqlSessionFactoryBean -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:sql-map-config.xml"/>
	</bean>	
	
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"></constructor-arg>
	</bean>

	
	<!--  AOP를 어노테이션으로 설정하기 위한 엘리먼트 선언 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!--  DataSource 설정 : JdbcTemplates클래스가 JDBC API를 이용하여 DB연동을 처리하기 위해 커넥션을 얻어야 한다.
		JdbcTemplate객체가 사용할 DataSource를 <bean> 등록하여 스프링컨테이너가 생성하도록 해야한다. -->
	<context:property-placeholder location="classpath:config/database.properties"/>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!--  Transaction 설정 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!--  Transaction advice 설정 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* com.multicampus.biz..*(..))"/>
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
	</aop:config>
	
	
	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	
	
	
	
	<!-- <bean id="before" class="com.springbook.biz.common.BeforeAdvice"></bean>
	<aop:config>
		<aop:pointcut id="allPointcut"
						expression="execution(* com.springbook.biz..*Impl.*(..))"/>
		<aop:aspect ref="before">
			<aop:before pointcut-ref="allPointcut" method="beforeLog"/>		
		</aop:aspect>
	</aop:config> -->
	
	<!-- <bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice"></bean>
	<aop:config>
		<aop:pointcut id="getPointcut"
						expression="execution(* com.springbook.biz..*Impl.get*(..))" />
		<aop:aspect ref="afterReturning">
			<aop:after-returning pointcut-ref="getPointcut" method="afterLog" returning="returnObj"/>
		</aop:aspect>				
	</aop:config> -->
	
	<!-- <bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"></bean>
	<bean id="after" class="com.springbook.biz.common.AfterAdvice"/>
	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
		<aop:aspect ref="afterThrowing">
			<aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog" throwing="exceptObj"/>
		</aop:aspect>
		
		<aop:aspect ref="after">
			<aop:after pointcut-ref="allPointcut" method="finallyLog"/>		
		</aop:aspect>
	</aop:config> -->
	
	<!-- <bean id="around" class="com.springbook.biz.common.AroundAdvice"/>
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
		<aop:aspect ref="around">
			<aop:around pointcut-ref="allPointcut" method="aroundLog" />
		</aop:aspect>
	</aop:config> -->
	
	
	<!-- <bean id="log" class="com.springbook.biz.common.MyLogAdvice"></bean>
	<aop:config>
		<aop:pointcut id="allPointcut"
						expression="execution(* com.springbook.biz..*Impl.*(..))"/>
		<aop:pointcut id="getPointcut"
						expression="execution(* com.springbook.biz..*Impl.get*(..))"/>
						
		<aop:aspect ref="log">
			<aop:before pointcut-ref="getPointcut" method="myLogPrint"/>
		</aop:aspect>
	
	</aop:config> -->
	
	<!-- <bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO" />
	</bean>
	
	<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO"/>
	 -->
</beans>
